#!/bin/sh

# -----------------------------------------------------------------------------
# Error: Print error message if script fails.
# -----------------------------------------------------------------------------

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Setup failed\n" >&2; exit $ret' EXIT

set -e

# -----------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------

count=1

dim="\033[2m"
reset="\033[0m"

brews=(
  git
)

casks=(
  alfred
  google-chrome
  iterm2
  spectacle
  spotify
  visual-studio-code
)

# -----------------------------------------------------------------------------
# Print functions.
# -----------------------------------------------------------------------------

fancy_print() {
  printf "%b" \
    "$(tput setaf "$2" 2> /dev/null)" \
    "$1" \
    "$(tput sgr0 2> /dev/null)"
}

print_in_red() {
  fancy_print "$1" 1
}

print_in_green() {
  fancy_print "$1" 2
}

print_success() {
  print_in_green "   [✓] $1\n"
}

print_muted() {
  printf "   ${dim}[✓] $1${reset}\n" "$@"
}

print_error() {
  print_in_red "   [𝘅] $1 $2\n"
}

# -----------------------------------------------------------------------------
# Text formatting.
# -----------------------------------------------------------------------------

chapter() {
  local fmt="$1"; shift
  printf "$((count++)). $fmt\n" "$@"
}

echo_install() {
  local fmt="$1"; shift
  printf "   [↓] $fmt " "$@"
}

# -----------------------------------------------------------------------------
# Check internet connection.
# -----------------------------------------------------------------------------

chapter "Checking internet connection"

if [ ping -q -w1 -c1 google.com &>/dev/null ]; then
  print_error "Check internet connection";
  exit 0
else
  print_success "Internet connected";
fi

# -----------------------------------------------------------------------------
# Install Xcode.
# -----------------------------------------------------------------------------

chapter "Installing dependencies"

if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
  test -d "${xpath}" && test -x "${xpath}"; then
  print_muted "Xcode already installed"
else
  xcode-select --install
  print_success "Xcode installed"
fi

# -----------------------------------------------------------------------------
# Install NVM.
# -----------------------------------------------------------------------------

if [ -x nvm ]; then
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  print_success "NVM installed"
  nvm install node
  nvm use node
  nvm run node --version
  nodev=$(node -v)
  print_success "Using Node $nodev"
else
  print_muted "NVM already installed"
fi

# -----------------------------------------------------------------------------
# Install Homebrew.
# -----------------------------------------------------------------------------

if ! [ -x "$(command -v brew)" ]; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  # export PATH?
  print_success "Homebrew installed"
else
  print_muted "Homebrew already installed"
fi

# -----------------------------------------------------------------------------
# Update Homebrew.
# -----------------------------------------------------------------------------

brew update >/dev/null 2>&1

# -----------------------------------------------------------------------------
# Install brews.
# -----------------------------------------------------------------------------

chapter "Installing Homebrew formulae"

for brew in ${brews[*]}; do
  if [[ ! $(brew list --formula | grep $brew) ]]; then
    echo_install "Installing $brew"
    brew install --formula $brew >/dev/null
    print_in_green "✓ installed\n"
  else
    print_muted "$brew already installed"
  fi
done

# -----------------------------------------------------------------------------
# Install casks.
# -----------------------------------------------------------------------------

chapter "Installing apps via Homebrew"

for cask in ${casks[*]}; do
  if [[ ! $(brew list --casks | grep $cask) ]]; then
    echo_install "Installing $cask"
    brew install --cask -f $cask >/dev/null
    print_in_green "✓ installed\n"
  else
    print_muted "$cask already installed"
  fi
done

# -----------------------------------------------------------------------------
# Cleanup Homebrew.
# -----------------------------------------------------------------------------

chapter "Cleaning up Homebrew"
brew cleanup 2> /dev/null

# -----------------------------------------------------------------------------
# 🎉
# -----------------------------------------------------------------------------

chapter "Setup complete!"
